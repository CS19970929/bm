#ifndef SCI_SLAVE_H
#define SCI_SLAVE_H

#define	SCI_TX_BUF_LEN			200   //注意这两个的长度问题，特别是第一个，在各种装数据可能会出错，最多100个数据
#define RS485_MAX_BUFFER_SIZE 	200
#define	U16BUFFER_TX			8	//指令发送的数组长度

union SysStatusFlag{
    UINT8   all;
    struct structSysStatusFlag
    {
        UINT8 b1SCI1CommuErr       	:1; //SCI1通讯异常
        UINT8 b1SCI2CommuErr       	:1; //SCI2通讯异常
        UINT8 b1CanTxDelayFlag      :1; //CAN发送延时
        UINT8 b1BUSOFF              :1; //BUS OFF状态标志位

    	UINT8 b1CANOffTestSd        :1;
		UINT8 b1EepromErr           :1; //EEPROM异常
        UINT8 b2Rcved             	:2; 
     }bits;
};



// SCI_485 Message Structure
struct RS485MSG {
	UINT8	ptr_no;          	// Word stating what state msg is in
	UINT8	csr;          		// I2C address of slave msg is intended for
	UINT16	u16RdRegStartAddr;	// read reg start addr
	UINT16	u16RdRegStartAddrActure;	//自定义地址保存
	UINT8	u16RdRegByteNum;    // read byte lenth
	UINT8	AckLenth;			// ack byte lenth
	UINT8	AckType;			// ack type
	UINT8	ErrorType;			// error type
	UINT8 	u16Buffer[RS485_MAX_BUFFER_SIZE];    // Array holding msg data - max that
	enum RS485_CMD_E enRs485CmdType;
};


//RS485状态机状态
#define	RS485_STA_IDLE				0
#define	RS485_STA_RX_COMPLETE		1
#define	RS485_STA_RX_OK				2
#define	RS485_STA_TX_COMPLETE		3


#define	RS485_ACK_POS			        0x00	// 正响应
#define	RS485_ACK_NEG			        0x01	// 负响应
//Error type
#define	RS485_ERROR_ADDR_INVALID	    0x01	// 地址不合法
#define	RS485_ERROR_CRC_ERROR			0x02	// CRC校验错误
#define	RS485_ERROR_DATA_INVALID	    0x03	// 参数不合法
#define	RS485_ERROR_CMD_INVALID			0x04	// 当前状态下命令无效
#define	RS485_ERROR_RONLY_NO_W			0x05	// 只读参数拒绝写入
#define	RS485_ERROR_WONLY_NO_R			0x06	// 只写参数拒绝读取
#define	RS485_ERROR_NO_PERMISSION		0x07	// 无权限
#define	RS485_ERROR_NULL			    0x08	// 未知错误


//#define RS485_ADDR_RW_ORDER		0x1000
#define RS485_ADDR_RW_Cali1				0x2000
#define RS485_ADDR_RW_Cali2				0x2100

#define RS485_ADDR_RW_START2			0x2200
#define RS485_ADDR_RW_START3			0x2300
#define RS485_ADDR_RO_START				0xD000
#define RS485_CMD_ADDR_FLASH_CONNECT	0xFFFD		//MCU在线升级连接命令

//以下是只读一次，无
//#define RS485_ADDR_RO_LCD       0xC000
//#define RS485_ADDR_RO_FA_WA     0xC001



enum RS485_CMD_RW_E {

	RS485_CMD_ADDR_RESET_CALIB_COEF = 0x1000,
	RS485_CMD_ADDR_RESET_PROTECT_COEF,
	RS485_CMD_ADDR_RESET_WARN_COEF,
	RS485_CMD_ADDR_RESET_CALIB_TEMP,
	RS485_CMD_ADDR_RESET_BALA_HEAT_COEF,
	RS485_CMD_ADDR_RESET_FAULT_WARN_RECORD,
	
	RS485_CMD_ADDR_ON_OFF_FUNCTION = 0x1100,  //包含加热，MOS动作，均衡动作
	RS485_CMD_ADDR_AFE_WAKEUP,	 
	RS485_CMD_ADDR_AFE_SHUTDOWN,

	
	RS485_CMD_ADDR_VC1CALIB_K = 0x2000,
	RS485_CMD_ADDR_VC1CALIB_B,
	RS485_CMD_ADDR_VC2CALIB_K,
	RS485_CMD_ADDR_VC2CALIB_B,
	RS485_CMD_ADDR_VC3CALIB_K,
	RS485_CMD_ADDR_VC3CALIB_B,
	RS485_CMD_ADDR_VC4CALIB_K,
	RS485_CMD_ADDR_VC4CALIB_B,
	RS485_CMD_ADDR_VC5CALIB_K,
	RS485_CMD_ADDR_VC5CALIB_B,
	RS485_CMD_ADDR_VC6CALIB_K,
	RS485_CMD_ADDR_VC6CALIB_B,
	RS485_CMD_ADDR_VC7CALIB_K,
	RS485_CMD_ADDR_VC7CALIB_B,
	RS485_CMD_ADDR_VC8CALIB_K,
	RS485_CMD_ADDR_VC8CALIB_B,
	RS485_CMD_ADDR_VC9CALIB_K,
	RS485_CMD_ADDR_VC9CALIB_B,
	RS485_CMD_ADDR_VC10CALIB_K,
	RS485_CMD_ADDR_VC10CALIB_B,
	RS485_CMD_ADDR_VC11CALIB_K,
	RS485_CMD_ADDR_VC11CALIB_B,
	RS485_CMD_ADDR_VC12CALIB_K,
	RS485_CMD_ADDR_VC12CALIB_B,
	RS485_CMD_ADDR_VC13CALIB_K,
	RS485_CMD_ADDR_VC13CALIB_B,
	RS485_CMD_ADDR_VC14CALIB_K,
	RS485_CMD_ADDR_VC14CALIB_B,
	RS485_CMD_ADDR_VC15CALIB_K,
	RS485_CMD_ADDR_VC15CALIB_B,
	RS485_CMD_ADDR_VC16CALIB_K,
	RS485_CMD_ADDR_VC16CALIB_B,
	RS485_CMD_ADDR_VAFE1CALIB_K,
	RS485_CMD_ADDR_VAFE1CALIB_B,
	RS485_CMD_ADDR_ICHGCALIB_K,
	RS485_CMD_ADDR_ICHGCALIB_B,
	RS485_CMD_ADDR_IDISCHGCALIB_K,
	RS485_CMD_ADDR_IDISCHGCALIB_B,
	RS485_CMD_ADDR_VBUS_K,
	RS485_CMD_ADDR_VBUS_B,


	RS485_CMD_ADDR_TEMP1_CALIB_K = 0x2100,
	RS485_CMD_ADDR_TEMP1_CALIB_B,
	RS485_CMD_ADDR_TEMP2_CALIB_K,
	RS485_CMD_ADDR_TEMP2_CALIB_B,
	RS485_CMD_ADDR_TEMP3_CALIB_K,
	RS485_CMD_ADDR_TEMP3_CALIB_B,
	RS485_CMD_ADDR_TEMP_ENV_CALIB_K,
	RS485_CMD_ADDR_TEMP_ENV_CALIB_B,
	RS485_CMD_ADDR_TEMP_MOS_CALIB_K,
	RS485_CMD_ADDR_TEMP_MOS_CALIB_B,


	RS485_CMD_ADDR_VCELL_OVP = 0x2200,
	RS485_CMD_ADDR_VCELL_OVP_RCV,
	RS485_CMD_ADDR_VCELL_UVP,
	RS485_CMD_ADDR_VCELL_UVP_RCV,
	
	RS485_CMD_ADDR_VBUS_OVP,
	RS485_CMD_ADDR_VBUS_OVP_RCV,
	RS485_CMD_ADDR_VBUS_UVP,
	RS485_CMD_ADDR_VBUS_UVP_RCV,
	
	RS485_CMD_ADDR_V_PRT_FILTER,
	RS485_CMD_ADDR_ICHG_OCP,      //0x2209
	RS485_CMD_ADDR_ICHG_PRT_FILTER,
	RS485_CMD_ADDR_IDISCHG_OCP,
	
	RS485_CMD_ADDR_IDISCHG_PRT_FILTER,
	RS485_CMD_ADDR_TCHG_OTP,      //0x220D
	RS485_CMD_ADDR_TCHG_OTP_RCV,
	RS485_CMD_ADDR_TCHG_UTP,
	
	RS485_CMD_ADDR_TCHG_UTP_RCV,
	RS485_CMD_ADDR_TDSG_OTP,
	RS485_CMD_ADDR_TDSG_OTP_RCV,
	RS485_CMD_ADDR_TDISCHG_UTP,

	RS485_CMD_ADDR_TDISCHG_UTP_RCV,
	RS485_CMD_ADDR_TMOS_OTP,	
	RS485_CMD_ADDR_TMOS_OTP_RCV,
	RS485_CMD_ADDR_T_PRT_FILTER,


	RS485_CMD_ADDR_VCELL_OVW,     //0x2218
	RS485_CMD_ADDR_VCELL_OVW_RCV,
	RS485_CMD_ADDR_VCELL_UVW,
	RS485_CMD_ADDR_VCELL_UVW_RCV,
	
	RS485_CMD_ADDR_VBUS_OVW,
	RS485_CMD_ADDR_VBUS_OVW_RCV,
	RS485_CMD_ADDR_VBUS_UVW,
	RS485_CMD_ADDR_VBUS_UVW_RCV,
	
	RS485_CMD_ADDR_V_WARN_FILTER,
	RS485_CMD_ADDR_ICHG_OCW,      //0x2221
	RS485_CMD_ADDR_ICHG_WARN_FILTER,
	RS485_CMD_ADDR_IDISCHG_OCW,

	RS485_CMD_ADDR_IDISCHG_WARN_FILTER,
	RS485_CMD_ADDR_TCHG_OTW,      //0x2225
	RS485_CMD_ADDR_TCHG_UTW,
	RS485_CMD_ADDR_TDISCHG_OTW,

	RS485_CMD_ADDR_TDISCHG_UTW,
	RS485_CMD_ADDR_TMOS_OTW,
	RS485_CMD_ADDR_TMOS_OTW_RCV,
	RS485_CMD_ADDR_T_WARN_FILTER, 


	RS485_CMD_ADDR_BALANCE_OV,  //0x222C
	RS485_CMD_ADDR_BALANCE_OW,
	RS485_CMD_ADDR_BALANCE_CW1,	
	RS485_CMD_ADDR_BALANCE_CW2,
	RS485_CMD_ADDR_HEAT_DSG_H,  //0x2230
	RS485_CMD_ADDR_HEAT_DSG_L,
	RS485_CMD_ADDR_HEAT_CHG_H,
	RS485_CMD_ADDR_HEAT_CHG_L,
	RS485_CMD_ADDR_SOC_UP,	    //0x2234
	RS485_CMD_ADDR_SOC_UW,	   
	RS485_CMD_ADDR_SOC_UP_RCV,
	RS485_CMD_ADDR_SOC_FILTER,

	RS485_CMD_ADDR_VDELTA_OP,	    //0x2238
	RS485_CMD_ADDR_VDELTA_OW,	   
	RS485_CMD_ADDR_VDELTA_REC,
	RS485_CMD_ADDR_VDELTA_FILTER,

	RS485_CMD_ADDR_NORMALV,	    //0x223C		//add by yang_Sleep
	RS485_CMD_ADDR_NORMALT,	   
	RS485_CMD_ADDR_OVERDSGV,
	RS485_CMD_ADDR_OVERDSGT,

	RS485_CMD_ADDR_CSRES = 0x2300,
	RS485_CMD_ADDR_CSRES_NUM,
	RS485_CMD_ADDR_PWMCUR_MAX,
	RS485_CMD_ADDR_PWMCUR_NEED,

	RS485_CMD_ADDR_SOC_AH,		//0x2304
	RS485_CMD_ADDR_SOC_CYCLE,	   
	RS485_CMD_ADDR_SOC_VCELLMAX,
	RS485_CMD_ADDR_SOC_VCELLMIN,
	RS485_CMD_ADDR_SOC_EEPROM,	//0x2308
	RS485_CMD_ADDR_SOC_RES1,	   
	RS485_CMD_ADDR_SOC_RES2,
	RS485_CMD_ADDR_SOC_RES3,

	RS485_CMD_ADDR_CopperLoss1,	//0x230C
	RS485_CMD_ADDR_CopperLoss2,
	RS485_CMD_ADDR_CopperLoss3,
	RS485_CMD_ADDR_CopperLoss4,
	RS485_CMD_ADDR_CopperLoss5,
	RS485_CMD_ADDR_CopperLoss6,
	RS485_CMD_ADDR_CopperLoss7,
	RS485_CMD_ADDR_CopperLoss8,

	RS485_CMD_ADDR_CellNum1,
	RS485_CMD_ADDR_CellNum2,
	RS485_CMD_ADDR_CellNum3,
	RS485_CMD_ADDR_CellNum4,
	RS485_CMD_ADDR_CellNum5,
	RS485_CMD_ADDR_CellNum6,
	RS485_CMD_ADDR_CellNum7,
	RS485_CMD_ADDR_CellNum8,

	RS485_CMD_ADDR_RTC_TIME_YEAR,	//0x231C
	RS485_CMD_ADDR_RTC_TIME_MONTH,
	RS485_CMD_ADDR_RTC_TIME_DAY,
	RS485_CMD_ADDR_RTC_TIME_HOUR,
	RS485_CMD_ADDR_RTC_TIME_MINUTE,
	RS485_CMD_ADDR_RTC_TIME_SECOND,
	RS485_CMD_ADDR_RTC_ALARM_YEAR,
	RS485_CMD_ADDR_RTC_ALARM_MONTH,
	RS485_CMD_ADDR_RTC_ALARM_DAY,	
	RS485_CMD_ADDR_RTC_ALARM_HOUR,
	RS485_CMD_ADDR_RTC_ALARM_MINUTE,
	RS485_CMD_ADDR_RTC_ALARM_SECOND,
};


extern volatile union SysStatusFlag 	g_st_SysStatusFlag;
extern struct RS485MSG 		g_stSCI1CurrentMsgPtr;


extern UINT8 u8FlashUpdateFlag;
extern UINT8 g_u8SCI1TxEnable;
extern UINT8 g_u8SCITxBuff[SCI_TX_BUF_LEN];
extern UINT16 Cell_balanced_flag;    //上传到上位机的
extern UINT16 g_u16SCI1CommuErrCnt;

void App_SciSlaveStation(struct RS485MSG *s);
void Sci_DataRx_Slave(struct RS485MSG *s);

void InitUSART1_Slave(void);
void TXbuffInt(void);

extern UINT8  LcdshowFlag ;//用于判断是否在显示
extern UINT8  LcdshowFlag1 ;//用于判断是否在显示
extern UINT8  LcdshowFlag2 ;//用于判断是否在显示
extern UINT8  LcdshowFlag3 ;//用于判断是否在显示
extern UINT8  LcdshowFlag4 ;//用于判断是否在显示
extern UINT8  LcdshowFlag5 ;//用于判断是否在显示
extern UINT8  LcdshowFlag6 ;//用于判断是否在显示
extern UINT8  LcdshowFlag7 ;//用于判断是否在显示
extern UINT8  LcdshowFlag8 ;//用于判断是否在显示
extern UINT8  LcdshowFlag9 ;//用于判断是否在显示

extern UINT8  BlueToothFlag ;//用于判断蓝牙是否在显示
extern UINT8		HeatedFlag ;	//加热



#endif	/* SCI_SLAVE_H */

